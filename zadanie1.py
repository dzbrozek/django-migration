# Generated by Django 3.2.8 on 2021-10-11 13:15
import csv

from django.db import migrations
from django.db.models import Exists, OuterRef


def migrate_subscriber(apps, subscriber, conflict_writer, duplicate_writer):
    User = apps.get_model('users', 'User')
    Client = apps.get_model('users', 'Client')

    # User z polem email takim samym jak w Subscriber
    user_with_subscriber_email = User.objects.filter(email=subscriber.email).first()
    if user_with_subscriber_email:
        # jeśli istnieje User pomiń subskrybenta i nie twórz nowego użytkownika
        print("User already exists")
        return

    # Client z polem email takim jak Subscriber.email
    client_with_subscriber_email = Client.objects.annotate(
        duplicate_phone_numer=Exists(Client.objects.filter(phone=OuterRef('phone')).exclude(pk=OuterRef('pk')))
    ).filter(email=subscriber.email).first()

    if client_with_subscriber_email and client_with_subscriber_email.duplicate_phone_numer:
        # Nie twórz użytkowników na podstawie klientów z nieunikalnymi numerami telefonów
        # informację o takich klientach zapisz do pliku subscriber_phone_duplicate.csv
        duplicate_writer.writerow([subscriber.pk, client_with_subscriber_email.phone])
        print("Found client with duplicate phone number. Writing duplicate to csv")
        return

    if client_with_subscriber_email:
        # Jeśli istnieje Client

        # User z polem phone takim jak Client.phone
        user_with_client_phone = User.objects.filter(
            phone=client_with_subscriber_email.phone
        ).first()

        if not user_with_client_phone:
            # i nie istnieje User stwórz użytkownika na podstawie modelu Client

            User.objects.create(
                create_date=client_with_subscriber_email.create_date,
                email=client_with_subscriber_email.email,
                phone=client_with_subscriber_email.phone,
                gdpr_consent=subscriber.gdpr_consent,
            )
            print("Created a new user from client model")
            return
        else:
            # i istnieje User zapisz id i email subskrybenta do pliku subscriber_conflicts.csv
            print("Detected conflict between client and user. Writing conflict to csv")
            conflict_writer.writerow([subscriber.pk, subscriber.email])
            return
    else:
        # jeśli nie istnieje Client stwórz użytkownika z pustym polem phone
        User.objects.create(
            create_date=subscriber.create_date,
            email=subscriber.email,
            phone='',
            gdpr_consent=subscriber.gdpr_consent,
        )
        print("Created a new user from subscriber model")
        return


def migrate_subscriber_sms(apps, subscriber_sms, conflict_writer, duplicate_writer):
    User = apps.get_model('users', 'User')
    Client = apps.get_model('users', 'Client')

    # User z polem phone takim samym jak w SubscriberSMS
    user_with_subscriber_sms_phone = User.objects.filter(phone=subscriber_sms.phone).first()
    if user_with_subscriber_sms_phone:
        # jeśli istnieje User pomiń subskrybenta i nie twórz nowego użytkownika
        print("User with given phone already exists")
        return

    # Client z polem phone takim jak SubscriberSMS.phone
    client_with_subscriber_sms_phone = Client.objects.annotate(
        duplicate_phone_numer=Exists(Client.objects.filter(phone=OuterRef('phone')).exclude(pk=OuterRef('pk')))
    ).filter(phone=subscriber_sms.phone).first()

    if client_with_subscriber_sms_phone and client_with_subscriber_sms_phone.duplicate_phone_numer:
        # Nie twórz użytkowników na podstawie klientów z nieunikalnymi numerami telefonów
        # informację o takich klientach zapisz do pliku csv
        duplicate_writer.writerow([subscriber_sms.pk, client_with_subscriber_sms_phone.phone])
        print("Found client with duplicate phone number. Writing duplicate to csv")
        return

    if client_with_subscriber_sms_phone:
        # Jeśli istnieje Client

        # User z polem email takim jak Client.email
        user_with_client_email = User.objects.filter(
            email=client_with_subscriber_sms_phone.email
        ).first()

        if not user_with_client_email:
            # i nie istnieje User stwórz użytkownika na podstawie modelu Client

            User.objects.create(
                create_date=client_with_subscriber_sms_phone.create_date,
                email=client_with_subscriber_sms_phone.email,
                phone=client_with_subscriber_sms_phone.phone,
                gdpr_consent=subscriber_sms.gdpr_consent,
            )
            print("Created a new user from client model")
            return
        else:
            # i istnieje User zapisz id i phone numer subskrybenta do pliku csv
            print("Detected conflict between client and user. Writing conflict to csv")
            conflict_writer.writerow([subscriber_sms.pk, subscriber_sms.phone])
            return
    else:
        # jeśli nie istnieje Client stwórz użytkownika z pustym polem email
        User.objects.create(
            create_date=subscriber_sms.create_date,
            email='',
            phone=subscriber_sms.phone,
            gdpr_consent=subscriber_sms.gdpr_consent,
        )
        print("Created a new user from sms subscriber model")
        return


def migrate_subscribers(apps, *args):
    Subscriber = apps.get_model('users', 'Subscriber')

    subscribers_qs = Subscriber.objects.all()

    with open('subscriber_conflicts.csv', 'w') as subscriber_conflicts_file, \
         open('subscriber_phone_duplicate.csv', 'w') as subscriber_phone_duplicate_file:
        conflict_writer = csv.writer(subscriber_conflicts_file)
        conflict_writer.writerow(['subscriber_id', 'subscriber_email'])
        duplicate_writer = csv.writer(subscriber_phone_duplicate_file)
        duplicate_writer.writerow(['subscriber_id', 'client_phone'])

        for subscriber in subscribers_qs.iterator():
            migrate_subscriber(apps, subscriber, conflict_writer, duplicate_writer)


def migrate_subscribers_sms(apps, *args):
    SubscriberSMS = apps.get_model('users', 'SubscriberSMS')

    subscribers_sms_qs = SubscriberSMS.objects.all()

    with open('subscriber_sms_conflicts.csv', 'w') as subscriber_sms_conflicts_file, \
         open('subscriber_sms_phone_duplicate.csv', 'w') as subscriber_sms_phone_duplicate_file:
        conflict_writer = csv.writer(subscriber_sms_conflicts_file)
        conflict_writer.writerow(['subscriber_sms_id', 'subscriber_sms_phone'])
        duplicate_writer = csv.writer(subscriber_sms_phone_duplicate_file)
        duplicate_writer.writerow(['subscriber_sms_id', 'client_phone'])

        for subscriber_sms in subscribers_sms_qs.iterator():
            migrate_subscriber_sms(apps, subscriber_sms, conflict_writer, duplicate_writer)


class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(migrate_subscribers),
        migrations.RunPython(migrate_subscribers_sms)
    ]
